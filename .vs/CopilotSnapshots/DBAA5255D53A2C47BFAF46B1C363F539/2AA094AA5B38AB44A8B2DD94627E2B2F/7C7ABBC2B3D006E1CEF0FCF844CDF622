using System;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using RotatableDie.Services;

namespace RotatableDie.Models.DieTypes
{
    public class TetrahedronDie : Die
    {
        public TetrahedronDie(DieTextureService textureService) 
            : base(DieType.Tetrahedron, textureService)
        {
        }
        
        public override void CreateGeometry(Model3DGroup modelGroup, Color color)
        {
            // Tetrahedron has 4 equilateral triangular faces
            double size = 0.8; // Scale to a reasonable size
            
            // Calculate coordinates for a regular tetrahedron using more accurate formulas
            Point3D[] vertices = new Point3D[4];
            
            // These coordinates create a perfect regular tetrahedron
            double a = size * Math.Sqrt(2) / 3.0;
            double b = size * -1.0 / 3.0;
            double c = size * 2.0 / 3.0;
            
            vertices[0] = new Point3D(0, 0, size);  // Top point
            vertices[1] = new Point3D(size, 0, b);  // Base point 1
            vertices[2] = new Point3D(-size/2, size * Math.Sqrt(3)/2, b);  // Base point 2
            vertices[3] = new Point3D(-size/2, -size * Math.Sqrt(3)/2, b); // Base point 3
            
            // Create textures for each face
            BitmapImage[] textures = new BitmapImage[4];
            for (int i = 0; i < 4; i++)
            {
                textures[i] = TextureService.CreateDieTexture(i + 1, color, Type);
            }
            
            // Create the four triangular faces with consistent winding
            GeometryHelper.CreateTriangleFace(modelGroup, vertices, new int[] { 0, 2, 1 }, textures[0]);
            GeometryHelper.CreateTriangleFace(modelGroup, vertices, new int[] { 0, 1, 3 }, textures[1]);
            GeometryHelper.CreateTriangleFace(modelGroup, vertices, new int[] { 0, 3, 2 }, textures[2]);
            GeometryHelper.CreateTriangleFace(modelGroup, vertices, new int[] { 1, 2, 3 }, textures[3]);
        }
    }
}
