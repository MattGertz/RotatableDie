using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using System.Windows.Controls;
using System.Collections.Generic;
using RotatableDie.Models;
using RotatableDie.Services;

namespace RotatableDie.UI
{
    /// <summary>
    /// Handles visualization and interaction with the 3D die
    /// </summary>
    public class DieVisualizer
    {
        private readonly Viewport3D _viewport;
        private readonly DieFactory _dieFactory;
        
        private Point _lastMousePosition;
        private bool _isDragging = false;
        private AxisAngleRotation3D _rotationX;
        private AxisAngleRotation3D _rotationY;
        private AxisAngleRotation3D _rotationZ;
        private ModelVisual3D _dieVisual;
        
        // Threshold for determining movement direction
        private const double MOVEMENT_THRESHOLD = 2.5;  // Increased from 1.5 to be more strict
        private const double MINIMUM_MOVEMENT = 0.5;    // Minimum movement to register rotation
        private const int MOVEMENT_HISTORY_SIZE = 5;    // Number of movements to track for intent detection
        
        // Movement history tracking
        private Queue<Vector> _movementHistory = new Queue<Vector>();
        private MovementIntent _currentIntent = MovementIntent.None;
        
        private enum MovementIntent
        {
            None,
            Vertical,
            Horizontal,
            Diagonal
        }
        
        public DieVisualizer(Viewport3D viewport, DieFactory dieFactory)
        {
            _viewport = viewport;
            _dieFactory = dieFactory;
            
            // Create rotation transforms
            _rotationX = new AxisAngleRotation3D(new Vector3D(1, 0, 0), 0);
            _rotationY = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
            _rotationZ = new AxisAngleRotation3D(new Vector3D(0, 0, 1), 0);
            
            // Create the die visual container
            _dieVisual = new ModelVisual3D();
            _viewport.Children.Add(_dieVisual);
            
            // Set up mouse event handlers
            _viewport.MouseDown += Viewport_MouseDown;
            _viewport.MouseMove += Viewport_MouseMove;
            _viewport.MouseUp += Viewport_MouseUp;
        }
        
        /// <summary>
        /// Creates and renders a die with the specified type and color
        /// </summary>
        public void CreateDie(DieType dieType, Color color)
        {
            // Clear the current die visual content
            _dieVisual.Content = null;
            
            // Force UI update
            _viewport.InvalidateVisual();
            
            // Create a new model group for the die
            Model3DGroup dieModelGroup = new Model3DGroup();
            
            // Create solid based on selected type
            Die die = _dieFactory.CreateDie(dieType);
            die.CreateGeometry(dieModelGroup, color);
            
            // Create a transform group for the rotations
            Transform3DGroup transformGroup = new Transform3DGroup();
            transformGroup.Children.Add(new RotateTransform3D(_rotationX));
            transformGroup.Children.Add(new RotateTransform3D(_rotationY));
            transformGroup.Children.Add(new RotateTransform3D(_rotationZ));
            
            // Apply the transforms to the model
            dieModelGroup.Transform = transformGroup;
            
            // Set the content of the die visual
            _dieVisual.Content = dieModelGroup;
        }
        
        private void Viewport_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed || e.RightButton == MouseButtonState.Pressed)
            {
                _isDragging = true;
                _lastMousePosition = e.GetPosition(_viewport);
                
                // Reset movement tracking on new drag
                _movementHistory.Clear();
                _currentIntent = MovementIntent.None;
                
                // Capture mouse to continue getting events even when outside the viewport
                Mouse.Capture(_viewport);
            }
        }
        
        private void Viewport_MouseMove(object sender, MouseEventArgs e)
        {
            if (_isDragging)
            {
                Point currentMousePosition = e.GetPosition(_viewport);
                
                // Calculate the difference in position
                double deltaX = currentMousePosition.X - _lastMousePosition.X;
                double deltaY = currentMousePosition.Y - _lastMousePosition.Y;
                
                // Left button: X and Y axis rotation
                if (e.LeftButton == MouseButtonState.Pressed)
                {
                    // Get absolute deltas for direction comparison
                    double absDeltaX = Math.Abs(deltaX);
                    double absDeltaY = Math.Abs(deltaY);
                    
                    // Skip processing for very tiny movements (likely unintentional)
                    if (absDeltaX < 0.1 && absDeltaY < 0.1)
                    {
                        _lastMousePosition = currentMousePosition;
                        return;
                    }
                    
                    // Record this movement vector for intent tracking
                    Vector movement = new Vector(deltaX, deltaY);
                    UpdateMovementHistory(movement);
                    
                    // Analyze current movement intent based on recent history
                    MovementIntent newIntent = AnalyzeMovementIntent();
                    
                    // If we have a clear new intent or if the intent has changed
                    if (newIntent != MovementIntent.None && (_currentIntent == MovementIntent.None || newIntent != _currentIntent))
                    {
                        _currentIntent = newIntent;
                    }
                    
                    // Apply rotations based on current intent
                    switch (_currentIntent)
                    {
                        case MovementIntent.Vertical:
                            // Only rotate around X axis
                            _rotationX.Angle += deltaY * 0.5;
                            break;
                            
                        case MovementIntent.Horizontal:
                            // Only rotate around Y axis
                            _rotationY.Angle += deltaX * 0.5;
                            break;
                            
                        case MovementIntent.Diagonal:
                            // Apply both rotations
                            _rotationX.Angle += deltaY * 0.5;
                            _rotationY.Angle += deltaX * 0.5;
                            break;
                            
                        case MovementIntent.None:
                            // First movement or unclear intent - use a stricter single-movement check
                            if (absDeltaY > MOVEMENT_THRESHOLD * absDeltaX && absDeltaY > MINIMUM_MOVEMENT)
                            {
                                _rotationX.Angle += deltaY * 0.5; // Vertical movement only
                            }
                            else if (absDeltaX > MOVEMENT_THRESHOLD * absDeltaY && absDeltaX > MINIMUM_MOVEMENT)
                            {
                                _rotationY.Angle += deltaX * 0.5; // Horizontal movement only
                            }
                            else if (absDeltaX > MINIMUM_MOVEMENT && absDeltaY > MINIMUM_MOVEMENT)
                            {
                                // Both axes have significant movement
                                _rotationX.Angle += deltaY * 0.5;
                                _rotationY.Angle += deltaX * 0.5;
                            }
                            break;
                    }
                }
                
                // Right mouse button: Z axis rotation in a more natural way
                if (e.RightButton == MouseButtonState.Pressed)
                {
                    // Calculate rotation based on movement relative to center of viewport
                    Point viewportCenter = new Point(_viewport.ActualWidth / 2, _viewport.ActualHeight / 2);
                    Point previousVector = new Point(_lastMousePosition.X - viewportCenter.X, _lastMousePosition.Y - viewportCenter.Y);
                    Point currentVector = new Point(currentMousePosition.X - viewportCenter.X, currentMousePosition.Y - viewportCenter.Y);
                    
                    // Skip tiny movements to avoid erratic rotation
                    double prevMagnitude = Math.Sqrt(previousVector.X * previousVector.X + previousVector.Y * previousVector.Y);
                    double currMagnitude = Math.Sqrt(currentVector.X * currentVector.X + currentVector.Y * currentVector.Y);
                    
                    if (prevMagnitude > 5 && currMagnitude > 5) // Minimum threshold to detect intentional movement
                    {
                        // Calculate the angle between previous and current vectors (cross product)
                        double crossProduct = previousVector.X * currentVector.Y - previousVector.Y * currentVector.X;
                        
                        // The sign of the cross product tells us the rotation direction
                        double rotationFactor = 0.5; // Adjust sensitivity
                        
                        // Apply rotation
                        _rotationZ.Angle -= (crossProduct / (prevMagnitude * currMagnitude)) * rotationFactor * 50;
                    }
                }
                
                // Save the current position for the next move event
                _lastMousePosition = currentMousePosition;
            }
        }
        
        private void UpdateMovementHistory(Vector movement)
        {
            _movementHistory.Enqueue(movement);
            
            // Keep only the most recent movements
            while (_movementHistory.Count > MOVEMENT_HISTORY_SIZE)
            {
                _movementHistory.Dequeue();
            }
        }
        
        private MovementIntent AnalyzeMovementIntent()
        {
            if (_movementHistory.Count < 3) // Need at least a few samples to determine intent
                return MovementIntent.None;
            
            // Analyze the movement vectors to determine dominant direction
            double totalDeltaX = 0;
            double totalDeltaY = 0;
            
            foreach (Vector movement in _movementHistory)
            {
                totalDeltaX += Math.Abs(movement.X);
                totalDeltaY += Math.Abs(movement.Y);
            }
            
            // Calculate average to smooth out jitter
            double avgDeltaX = totalDeltaX / _movementHistory.Count;
            double avgDeltaY = totalDeltaY / _movementHistory.Count;
            
            // Determine movement intent based on the average movement
            if (avgDeltaY > MOVEMENT_THRESHOLD * avgDeltaX && avgDeltaY > MINIMUM_MOVEMENT)
            {
                return MovementIntent.Vertical;
            }
            else if (avgDeltaX > MOVEMENT_THRESHOLD * avgDeltaY && avgDeltaX > MINIMUM_MOVEMENT)
            {
                return MovementIntent.Horizontal;
            }
            else if (avgDeltaX > MINIMUM_MOVEMENT && avgDeltaY > MINIMUM_MOVEMENT)
            {
                return MovementIntent.Diagonal;
            }
            
            return MovementIntent.None;
        }
        
        private void Viewport_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Released && e.RightButton == MouseButtonState.Released)
            {
                _isDragging = false;
                _currentIntent = MovementIntent.None;
                _movementHistory.Clear();
                
                // Release mouse capture
                Mouse.Capture(null);
            }
        }
    }
}
